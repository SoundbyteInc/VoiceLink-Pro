<!DOCTYPE html>
<html>
<head>
  <title>VoiceLink Pro</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Inter', sans-serif;
      background: radial-gradient(circle at center, #2f2f2f 0%, #111111 80%, #0a0a0a 100%);
      background-color: #1a1a1a;
      color: #eee;
      text-align: center;
      padding-top: 40px;
      min-height: 100vh;
      background-repeat: no-repeat;
      background-attachment: fixed;
    }


    h1 {
      font-size: 2.5em;
      margin-bottom: 0.5em;
      color: #e6e6e6;
      text-shadow: 0 1px 2px #000;
    }

    input, select, button {
      padding: 10px;
      font-size: 1em;
      margin: 10px;
      border-radius: 6px;
      border: 1px solid #444;
      background: #1a1a1a;
      color: #eee;
      box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.5);
    }

    button {
      background: linear-gradient(145deg, #00c775, #009f5d);
      border: none;
      color: white;
      font-weight: bold;
      cursor: pointer;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.4);
      transition: background 0.2s ease;
    }

    button:hover {
      background: linear-gradient(145deg, #00e287, #00b066);
    }

    button.connected {
      background: #cc0000 !important;
      color: #fff;
    }

    #status {
      margin-top: 20px;
      font-size: 1.2em;
      color: #ccc;
    }

    .meter-container {
      margin-top: 30px;
    }

    .meter-wrapper {
      position: relative;
      width: 80%;
      height: 14px;
      margin: 10px auto;
      background: linear-gradient(to bottom, #2a2a2a, #1a1a1a);
      border-radius: 5px;
      overflow: hidden;
      box-shadow: inset 0 0 5px #000;
    }

    .meter-fill {
      height: 100%;
      width: 0%;
      background: linear-gradient(to right, #00ffb7, #00a879);
      box-shadow: 0 0 8px #00c775;
      transition: width 0.1s ease-out;
    }

    .meter-ticks {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: space-between;
      pointer-events: none;
    }

    .meter-tick {
      width: 1px;
      height: 100%;
      background: rgba(255, 255, 255, 0.08);
    }

    .meter-labels {
      width: 80%;
      margin: 2px auto 15px;
      display: flex;
      justify-content: space-between;
      font-size: 0.75em;
      color: #666;
    }
  </style>
</head>
<body>
  <h1>SOUNDBYTE VOICE PRO</h1>
  <p>Enter your name and select devices</p>
  <input type="text" id="name" placeholder="Your Name" required />
  <br>
  <select id="micSelect"></select>
  <br>
  <select id="speakerSelect"></select>
  <br>
  <button id="connect">Connect</button>
  <button onclick="playTestTone()">Test Output</button>
  <p id="status">Not connected</p>

  <div class="meter-container">
    <p>Your Mic Input</p>
    <div class="meter-wrapper">
      <div class="meter-fill" id="inputMeter"></div>
      <div class="meter-ticks">
        <div class="meter-tick"></div>
        <div class="meter-tick"></div>
        <div class="meter-tick"></div>
        <div class="meter-tick"></div>
        <div class="meter-tick"></div>
        <div class="meter-tick"></div>
        <div class="meter-tick"></div>
        <div class="meter-tick"></div>
        <div class="meter-tick"></div>
        <div class="meter-tick"></div>
      </div>
    </div>

    <p>Received Audio</p>
    <div class="meter-wrapper">
      <div class="meter-fill" id="outputMeter"></div>
      <div class="meter-ticks">
        <div class="meter-tick"></div>
        <div class="meter-tick"></div>
        <div class="meter-tick"></div>
        <div class="meter-tick"></div>
        <div class="meter-tick"></div>
        <div class="meter-tick"></div>
        <div class="meter-tick"></div>
        <div class="meter-tick"></div>
        <div class="meter-tick"></div>
        <div class="meter-tick"></div>
      </div>
    </div>
  </div>


  <audio id="chime" src="https://actions.google.com/sounds/v1/alarms/beep_short.ogg"></audio>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const nameInput = document.getElementById('name');
    const micSelect = document.getElementById('micSelect');
    const speakerSelect = document.getElementById('speakerSelect');
    const connectBtn = document.getElementById('connect');
    const status = document.getElementById('status');
    const chime = document.getElementById('chime');
    const inputMeter = document.getElementById('inputMeter');
    const outputMeter = document.getElementById('outputMeter');

    let peer = null;
    let localStream = null;
    let remoteAudio = null;
    let isConnected = false;
    let remoteUserName = null;

    // Populate input/output device menus
    async function getDevices() {
      const devices = await navigator.mediaDevices.enumerateDevices();
      micSelect.innerHTML = '';
      speakerSelect.innerHTML = '';

      devices.forEach(device => {
        const option = document.createElement('option');
        option.value = device.deviceId;
        option.text = device.label || device.kind;
        if (device.kind === 'audioinput') micSelect.appendChild(option);
        if (device.kind === 'audiooutput') speakerSelect.appendChild(option);
      });

      // Hide speaker selector if setSinkId unsupported
      if (typeof HTMLMediaElement.prototype.setSinkId !== 'function') {
        speakerSelect.style.display = 'none';
      }
    }

    // Output test
    function playTestTone() {
      const test = new Audio("https://actions.google.com/sounds/v1/cartoon/wood_plank_flicks.ogg");
      test.play();
    }

    connectBtn.onclick = async () => {
      if (isConnected) {
        // ðŸ”´ Disconnect
        if (peer) peer.close();
        if (localStream) {
          localStream.getTracks().forEach(track => track.stop());
        }

        connectBtn.textContent = "Connect";
        connectBtn.classList.remove("connected");
        status.textContent = "Disconnected";
        isConnected = false;

        return;
      }

      // ðŸŸ¢ Connect
      const userName = nameInput.value.trim();
      if (!userName) return alert("Please enter your name.");

      localStream = await navigator.mediaDevices.getUserMedia({
        audio: {
          deviceId: micSelect.value,
          echoCancellation: false,
          noiseSuppression: false,
          autoGainControl: false
        }
      });

      startInputMeter(localStream);

      peer = new RTCPeerConnection({
        iceServers: [
          { urls: 'stun:stun.l.google.com:19302' },
          {
            urls: 'turn:openrelay.metered.ca:80',
            username: 'openrelayproject',
            credential: 'openrelayproject'
          }
        ]
      });

      localStream.getTracks().forEach(track => peer.addTrack(track, localStream));

      peer.ontrack = e => {
        const remoteStream = e.streams[0];

        remoteAudio = new Audio();
        remoteAudio.srcObject = remoteStream;
        remoteAudio.autoplay = true;
        remoteAudio.playsInline = true;

        remoteAudio.play().catch(err => console.warn('autoplay fail', err));

        if (typeof remoteAudio.setSinkId === 'function') {
          remoteAudio.setSinkId(speakerSelect.value).catch(e => console.warn('Sink error', e));
        }

        status.textContent = remoteUserName
          ? `${remoteUserName} is connected to the portal`
          : `Someone is connected`;

        chime.play();

        startOutputMeter(remoteStream);

        connectBtn.textContent = "Disconnect";
        connectBtn.classList.add("connected");
        isConnected = true;
      };

      peer.onicecandidate = e => {
        if (e.candidate) {
          socket.emit('signal', { user: nameInput.value, candidate: e.candidate });
        }
      };

      const offer = await peer.createOffer();
      await peer.setLocalDescription(offer);
      socket.emit('signal', { user: nameInput.value, sdp: peer.localDescription });
    };

    socket.on('signal', async data => {
      if (data.user && data.user !== nameInput.value) {
        remoteUserName = data.user;
      }

      if (!peer) return;

      if (data.sdp) {
        await peer.setRemoteDescription(new RTCSessionDescription(data.sdp));
        if (data.sdp.type === 'offer') {
          const answer = await peer.createAnswer();
          await peer.setLocalDescription(answer);
          socket.emit('signal', { user: nameInput.value, sdp: peer.localDescription });
        }
      } else if (data.candidate) {
        await peer.addIceCandidate(new RTCIceCandidate(data.candidate));
      }
    });

    function startInputMeter(stream) {
      const context = new AudioContext();
      const micSource = context.createMediaStreamSource(stream);
      const analyser = context.createAnalyser();
      micSource.connect(analyser);
      analyser.fftSize = 256;
      const data = new Uint8Array(analyser.frequencyBinCount);

      let smoothed = 0;
      const debug = false; // set to true for console logging

      function update() {
        analyser.getByteFrequencyData(data);
        const peak = Math.max(...data);
        smoothed = 0.8 * smoothed + 0.2 * peak;

        const percent = Math.min((smoothed / 3), 100); // ðŸ”½ scaled down more (divide by 3 instead of 1.5)
        inputMeter.style.width = percent + '%';

        if (debug) console.log('Mic peak:', peak.toFixed(2), 'â†’ visual:', percent.toFixed(1));

        requestAnimationFrame(update);
      }
      update();
    }


    function startOutputMeter(stream) {
      const context = new AudioContext();

      // Prevent conflicts with playback
      if (context.state === 'suspended') {
        context.resume();
      }

      const source = context.createMediaStreamSource(stream);
      const analyser = context.createAnalyser();
      analyser.fftSize = 256;

      source.connect(analyser);
      const data = new Uint8Array(analyser.frequencyBinCount);

      let smoothed = 0;

      function update() {
        analyser.getByteFrequencyData(data);
        const peak = Math.max(...data);
        smoothed = 0.8 * smoothed + 0.2 * peak;
        const percent = Math.min(smoothed / 3, 100);
        outputMeter.style.width = percent + '%';
        requestAnimationFrame(update);
      }

      update();
    }


    navigator.mediaDevices.getUserMedia({ audio: true }).then(() => getDevices());
  </script>

  <footer style="margin-top:40px; font-size:0.75em; color:#555;">
  Â© 2025 Soundbyte Inc. All Rights Reserved
</footer>

</body>
</html>
